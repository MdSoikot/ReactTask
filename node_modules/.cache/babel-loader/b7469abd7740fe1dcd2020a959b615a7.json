{"ast":null,"code":"import _slicedToArray from \"D:\\\\MyAllProject\\\\Javascript\\\\reactPractise\\\\project-task\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"D:\\\\MyAllProject\\\\Javascript\\\\reactPractise\\\\project-task\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\MyAllProject\\\\Javascript\\\\reactPractise\\\\project-task\\\\src\\\\views\\\\Tooltips.jsx\";\nimport React from 'react';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction arrowGenerator(color) {\n  return {\n    '&[x-placement*=\"bottom\"] $arrow': {\n      top: 0,\n      left: 0,\n      marginTop: \"-0.95em\",\n      width: \"2em\",\n      height: \"1em\",\n      \"&::before\": {\n        borderWidth: \"0 1em 1em 1em\",\n        borderColor: \"transparent transparent \".concat(color, \" transparent\")\n      }\n    },\n    '&[x-placement*=\"top\"] $arrow': {\n      bottom: 0,\n      left: 0,\n      marginBottom: \"-0.95em\",\n      width: \"2em\",\n      height: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 1em 0 1em\",\n        borderColor: \"\".concat(color, \" transparent transparent transparent\")\n      }\n    },\n    '&[x-placement*=\"right\"] $arrow': {\n      left: 0,\n      marginLeft: \"-0.95em\",\n      height: \"2em\",\n      width: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 1em 1em 0\",\n        borderColor: \"transparent \".concat(color, \" transparent transparent\")\n      }\n    },\n    '&[x-placement*=\"left\"] $arrow': {\n      right: 0,\n      marginRight: \"-0.95em\",\n      height: \"2em\",\n      width: \"1em\",\n      \"&::before\": {\n        borderWidth: \"1em 0 1em 1em\",\n        borderColor: \"transparent transparent transparent \".concat(color)\n      }\n    }\n  };\n}\n\nconst useStylesBootstrap = makeStyles(theme => ({\n  arrow: {\n    position: \"absolute\",\n    fontSize: 8,\n    \"&::before\": {\n      content: '\"\"',\n      margin: \"auto\",\n      display: \"block\",\n      width: 0,\n      height: 0,\n      borderStyle: \"solid\"\n    }\n  },\n  popper: arrowGenerator(\"#031b4e\"),\n  tooltip: {\n    fontWeight: \"bold\",\n    fontSize: 14,\n    padding: \"5px 20px\",\n    position: \"relative\",\n    backgroundColor: \"#031b4e\"\n  },\n  tooltipPlacementLeft: {\n    margin: \"0 8px\"\n  },\n  tooltipPlacementRight: {\n    margin: \"0 8px\"\n  },\n  tooltipPlacementTop: {\n    margin: \"8px 0\"\n  },\n  tooltipPlacementBottom: {\n    margin: \"1px 0\"\n  }\n}));\n\nfunction Tooltips(props) {\n  const value = props.value;\n\n  const _useStylesBootstrap = useStylesBootstrap(0),\n        arrow = _useStylesBootstrap.arrow,\n        classes = _objectWithoutProperties(_useStylesBootstrap, [\"arrow\"]);\n\n  const _React$useState = React.useState(null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        arrowRef = _React$useState2[0],\n        setArrowRef = _React$useState2[1];\n\n  const popperRef = React.useRef(null);\n  React.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n  return React.createElement(Tooltip, Object.assign({\n    classes: classes,\n    PopperProps: {\n      popperOptions: {\n        modifiers: {\n          arrow: {\n            enabled: Boolean(arrowRef),\n            element: arrowRef\n          }\n        }\n      }\n    }\n  }, props, {\n    //open={open}\n    enterTouchDelay: 0,\n    placement: \"bottom\",\n    title: React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"+\".concat(value, \" TB\"), React.createElement(\"span\", {\n      className: arrow,\n      ref: setArrowRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }));\n}\n\nexport default Tooltips;","map":{"version":3,"sources":["D:/MyAllProject/Javascript/reactPractise/project-task/src/views/Tooltips.jsx"],"names":["React","Tooltip","makeStyles","arrowGenerator","color","top","left","marginTop","width","height","borderWidth","borderColor","bottom","marginBottom","marginLeft","right","marginRight","useStylesBootstrap","theme","arrow","position","fontSize","content","margin","display","borderStyle","popper","tooltip","fontWeight","padding","backgroundColor","tooltipPlacementLeft","tooltipPlacementRight","tooltipPlacementTop","tooltipPlacementBottom","Tooltips","props","value","classes","useState","arrowRef","setArrowRef","popperRef","useRef","useEffect","current","update","popperOptions","modifiers","enabled","Boolean","element"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction arrowGenerator(color) {\r\n    return {\r\n        '&[x-placement*=\"bottom\"] $arrow': {\r\n            top: 0,\r\n            left: 0,\r\n            marginTop: \"-0.95em\",\r\n            width: \"2em\",\r\n            height: \"1em\",\r\n            \"&::before\": {\r\n                borderWidth: \"0 1em 1em 1em\",\r\n                borderColor: `transparent transparent ${color} transparent`\r\n            }\r\n        },\r\n        '&[x-placement*=\"top\"] $arrow': {\r\n            bottom: 0,\r\n            left: 0,\r\n            marginBottom: \"-0.95em\",\r\n            width: \"2em\",\r\n            height: \"1em\",\r\n            \"&::before\": {\r\n                borderWidth: \"1em 1em 0 1em\",\r\n                borderColor: `${color} transparent transparent transparent`\r\n            }\r\n        },\r\n        '&[x-placement*=\"right\"] $arrow': {\r\n            left: 0,\r\n            marginLeft: \"-0.95em\",\r\n            height: \"2em\",\r\n            width: \"1em\",\r\n            \"&::before\": {\r\n                borderWidth: \"1em 1em 1em 0\",\r\n                borderColor: `transparent ${color} transparent transparent`\r\n            }\r\n        },\r\n        '&[x-placement*=\"left\"] $arrow': {\r\n            right: 0,\r\n            marginRight: \"-0.95em\",\r\n            height: \"2em\",\r\n            width: \"1em\",\r\n            \"&::before\": {\r\n                borderWidth: \"1em 0 1em 1em\",\r\n                borderColor: `transparent transparent transparent ${color}`\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nconst useStylesBootstrap = makeStyles(theme => ({\r\n    arrow: {\r\n        position: \"absolute\",\r\n        fontSize: 8,\r\n        \"&::before\": {\r\n            content: '\"\"',\r\n            margin: \"auto\",\r\n            display: \"block\",\r\n            width: 0,\r\n            height: 0,\r\n            borderStyle: \"solid\"\r\n        }\r\n    },\r\n    popper: arrowGenerator(\"#031b4e\"),\r\n    tooltip: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 14,\r\n        padding: \"5px 20px\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#031b4e\"\r\n    },\r\n    tooltipPlacementLeft: {\r\n        margin: \"0 8px\"\r\n    },\r\n    tooltipPlacementRight: {\r\n        margin: \"0 8px\"\r\n    },\r\n    tooltipPlacementTop: {\r\n        margin: \"8px 0\"\r\n    },\r\n    tooltipPlacementBottom: {\r\n        margin: \"1px 0\"\r\n    }\r\n}));\r\n\r\nfunction Tooltips(props) {\r\n    const {   value } = props;\r\n    const { arrow, ...classes } = useStylesBootstrap(0);\r\n    const [arrowRef, setArrowRef] = React.useState(null);\r\n    const popperRef = React.useRef(null);\r\n\r\n        React.useEffect(() => {\r\n            if (popperRef.current) {\r\n                popperRef.current.update();\r\n            }\r\n        });\r\n\r\n    return (\r\n        <Tooltip\r\n            classes={classes}\r\n            PopperProps={{\r\n                popperOptions: {\r\n                    modifiers: {\r\n                        arrow: {\r\n                            enabled: Boolean(arrowRef),\r\n                            element: arrowRef\r\n                        }\r\n                    }\r\n                }\r\n            }}\r\n            {...props}\r\n            //open={open}\r\n            enterTouchDelay={0}\r\n            placement=\"bottom\"\r\n            title={\r\n                <React.Fragment>\r\n                    {`+${value} TB`}\r\n                    <span className={arrow} ref={setArrowRef} />\r\n                </React.Fragment>\r\n            }\r\n        >\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nexport default Tooltips"]},"metadata":{},"sourceType":"module"}